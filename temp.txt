--- place-holder data ---

        const students = [
            {
                id: '410544b2-4001-4271-9855-fec4b6a6442a',
                registration_number: 'sa23127814',
                email: 'udhayangavishwa@gmail.com',
                name: 'Vishwa Udayanga',
                password: 'vishwa310',
            },
            {
                id: '3958dc9e-712f-4377-85e9-fec4b6a6442a',
                registration_number: 'sa23129512',
                email: 'vishwa@gmail.com',
                name: 'Udayanga',
                password: 'vishwa310',
            },
            {
                id: '3958dc9e-742f-4377-85e9-fec4b6a6442a',
                registration_number: 'sa23321321',
                email: 'amanda@gmail.com',
                name: 'Amanda',
                password: 'amanda310',
            },

        ]

        const tokens = [
            {
                student_id: students[0].id,
                token: '410544b2-4001-4271-9855'
            }
        ]

--- seeding on route.ts ---

import bcrypt from 'bcrypt';
import { db } from '@vercel/postgres';
import { students, tokens } from '../lib/placeholder-data';

const client = await db.connect();

async function seedStudents() {
  await client.sql`CREATE EXTENSION IF NOT EXISTS "uuid-ossp"`;
  await client.sql`
    CREATE TABLE IF NOT EXISTS students (
      id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
      registration_number VARCHAR(255) NOT NULL,
      email TEXT NOT NULL UNIQUE,
      name VARCHAR(255) NOT NULL,
      password TEXT NOT NULL,
      paid BOOLEAN DEFAULT 0,
      paid_at DATETIME,
      verified BOOLEAN DEFAULT 0,
      verified_at DATETIME
    );
  `;

  const insertedStudents = await Promise.all(
    students.map(async (student) => {
      const hashedPassword = await bcrypt.hash(student.password, 10);
      return client.sql`
        INSERT INTO students (id, registration_number, email, name, password)
        VALUES (${user.id}, ${user.registration_number}, ${user.email}, ${user.name} ${hashedPassword})
        ON CONFLICT (id) DO NOTHING;
      `;
    }),
  );

  return insertedStudents;
}

async function seedTokens() {
    await client.sql`
        CREATE TABLE IF NOT EXISTS tokens (
            id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
            registration_number UUID NOT NULL,
            created_at DATETIME DEFAULT GETDATE(),
            updated_at DATETIME DEFAULT GETDATE(),
            token TEXT NOT NULL
        );
    `;

}


--- actions.ts ---

'use server';

import { z } from 'zod';
import { sql } from '@vercel/postgres';
import { revalidatePath } from 'next/cache';
import { redirect } from 'next/navigation';
import { signIn } from '@/auth';
import { AuthError } from 'next-auth';
 
const FormSchema = z.object({
  id: z.string(),
  registration_number: z
    .string({
      invalid_type_error: 'Please enter your registration number.',
    })
    .min(10, 'Please enter a valid number')
    .max(10, 'Please enter a valid number'),
  email: z
    .string({
      invalid_type_error: 'Please enter your email.',
    })
    .email('Pleas enter a valid email.'),
  name: z
    .string({
      invalid_type_error: 'Please enter your name.',
    })
    .max(50, 'Name is too long.'),
  password: z
    .string({
      invalid_type_error: 'Please enter your password.',
    })
    .min(10, 'Password must be at least 10 characters')
    .max(100),
  confirm_password: z
    .string({
      invalid_type_error: 'Please enter your password.',
    })
    .min(10, 'Password must be at least 10 characters')
    .max(100)
})
.refine(async (data) => {
  const emails = await fetchEmail()
  return !emails.include(data.email)
}, 'This email is already registered')
.refine(async (data) => {
  const registration_numbers = await fetchRegistrationNumbers()
  return !registration_numbers(data.registration_number)
}, "This registration number is already registered")
.refine((data) => data.password === data.confirm_password, {
  message: "Passwords don't match",
  path: ["confirm_password"],
})
 
const CreateInvoice = FormSchema.omit({ id: true });

export type State = {
  errors?: {
    registration_number?: string[];
    email?: string[];
    name?: string[];
    password?: string[];
    confirm_password?: string[];
  };
  message?: string | null;
};

export async function createStudent(prevState: State, formData: FormData) {
    const validatedFields = CreateInvoice.safeParse({
        registration_number: formData.get('registration_number'),
        email: formData.get('email'),
        name: formData.get('name'),
        password: formData.get('password'),
    });

    if (!validatedFields.success) {
      return {
        errors: validatedFields.error.flatten().fieldErrors,
        message: 'Missing Fields. Failed to Create student.',
      };
    }
    
    const { registration_number, email, name, password } = validatedFields.data;


    try {
      await sql`
      INSERT INTO students (registration_number, email, name, password)
      VALUES (${registration_number}, ${email}, ${name}, ${password})
      `;  
    } catch (error) {
      return { message: 'Database error: Failed to create invoice' };
    }
    
    revalidatePath('/dashboard/students'); // For example
    redirect('/dashboard/students'); //For example
}